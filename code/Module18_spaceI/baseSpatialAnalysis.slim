// Keywords: continuous space, continuous spatial landscape, reprising boundaries

initialize() {
	initializeSLiMOptions(dimensionality="xy");
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
	
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=0.3);
	i1.setInteractionFunction("n", 3.0, 0.1);
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=0.02);
	i2.setInteractionFunction("n", 3.0, 0.01);
}

early() { i2.evaluate(); }
1: mateChoice() {
	neighbors = i2.nearestNeighbors(individual, 500);
	//mate=size(neighbors) ? sample(neighbors, 1) else float(0);
	mate=size(neighbors) ? sample(neighbors, 1, weights=1/i2.distance(individual,neighbors)) else float(0);
	return mate;
}

1 late() {
	sim.addSubpop("p1", 500);
	// initial positions are random in ([0,1], [0,1])
	for (ind in p1.individuals) {
		do {
			side=0.3;
			p = p1.pointUniform(1);
			inside = abs(p[0]-0.5) < side & abs(p[1]-0.5) < side;
		} while (inside==F);
		ind.setSpatialPosition(p);
	}
}

1: late() {
	i1.evaluate();
	inds = p1.individuals;
	totalStrengths = i1.totalOfNeighborStrengths(inds);
	inds.fitnessScaling = 1.1 - totalStrengths / inds.size();
}


modifyChild() {
	// Absorbing boundary conditions
	pos = parent1.spatialPosition + rnorm(2, 0, 0.1);
	if (!p1.pointInBounds(pos))
		return F;
	child.setSpatialPosition(pos);
	return T;
}

20000 late() { sim.outputFixedMutations(); }
